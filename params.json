{
  "name": "Brightwheel",
  "tagline": "Build beautiful Electron user interfaces with Photon and Etch",
  "body": "[![NPM version](http://img.shields.io/npm/v/brightwheel.svg?style=flat-square)](https://www.npmjs.com/package/brightwheel)\r\n[![NPM downloads](http://img.shields.io/npm/dm/brightwheel.svg?style=flat-square)](https://www.npmjs.com/package/brightwheel)\r\n[![Build Status](http://img.shields.io/travis/loranallensmith/brightwheel/master.svg?style=flat-square)](https://travis-ci.org/loranallensmith/brightwheel)\r\n[![Coverage Status](https://img.shields.io/coveralls/loranallensmith/brightwheel.svg?style=flat-square)](https://coveralls.io/loranallensmith/brightwheel)\r\n[![Dependency Status](http://img.shields.io/david/loranallensmith/brightwheel.svg?style=flat-square)](https://david-dm.org/loranallensmith/brightwheel)\r\n\r\n### About\r\n\r\nBrightwheel is a JavaScript library that lets you use [Etch](https://github.com/atom/etch) and [Photon](http://photonkit.com/) to construct and manage the state of user interfaces for [Electron](https://electron.atom.io) applications.\r\n\r\n\r\n### Getting Started\r\n\r\n#### Installation\r\n\r\nAdd Brightwheel to your project's dependencies.\r\n```sh\r\n$ npm install --save brightwheel\r\n```\r\n\r\n#### Usage\r\n\r\nInclude Photon styles in your HTML file's `<head>`.\r\n```html\r\n<script src=\"path/to/photon.css\" charset=\"utf-8\"></script>\r\n```\r\n\r\nImport Brightwheel components into your project.\r\n```javascript\r\n// Import and namespace all components\r\nimport * as UI from 'brightwheel'\r\n\r\n// Import individual components\r\nimport { Button } from 'brightwheel'\r\n\r\n```\r\n\r\nGenerate components and add them to your document.\r\n```javascript\r\nlet mySubmitButton = new Button({\r\n  type: 'positive',\r\n  size: 'mini',\r\n  text: 'Submit'\r\n  // specify other properties as needed\r\n}, []);\r\n\r\nlet myCancelButton = new Button({\r\n  type: 'default',\r\n  size: 'mini',\r\n  text: 'Cancel'\r\n  // specify other properties as needed\r\n}, []);\r\n\r\n\r\n// Nest components within parent components\r\nlet myActions = new FormActions({\r\n  // specify properties as needed\r\n}, [\r\n  mySubmitButton,\r\n  myCancelButton\r\n]);\r\n\r\n// Nest the elements within the DOM\r\ndocument.querySelector('#form-1').appendChild(myActions.element);\r\n\r\n```\r\n\r\n## Contributing\r\n\r\nPull Request are welcome!\r\n\r\nFor an outline of the overall development priorities, have a look at the current [`ROADMAP.md`](https://github.com/loranallensmith/brightwheel/blob/master/ROADMAP.md) file.\r\n\r\nPlease follow the steps below to contribute to this project:\r\n- Look for an open issue (or open one if it doesn't already exist)\r\n- Fork this repository\r\n- Be sure to write tests for the changes you're proposing\r\n- Open a Pull Request and mention @loranallensmith\r\n- To help with discoverability down the road, it helps to reference the original Issue your changes address in the body of your Pull Request\r\n\r\n\r\n### How to Test\r\n\r\nRun one, or a combination of the following commands to lint and test your code:\r\n\r\n```sh\r\n$ npm run lint          # Lint the source code with ESLint\r\n$ npm test              # Run unit tests with Mocha\r\n$ npm run test:watch    # Run unit tests with Mocha, and watch files for changes\r\n$ npm run test:cover    # Run unit tests with code coverage by Istanbul\r\n```\r\n\r\n\r\n### License\r\n\r\nMIT Â© 2016 Allen Smith &lt;loranallensmith@github.com&gt;\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}